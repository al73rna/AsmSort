Microsoft (R) Macro Assembler Version 11.00.50727.1	    01/13/14 23:06:23
quicksort.asm						     Page 1 - 1


				.386
				.MODEL FLAT
				.STACK 10000
				ExitProcess PROTO NEAR32 stdcall, dwExitCode:DWORD
				INCLUDE io.h
			      C ; IO.H -- header file for I/O macros
			      C ; 32-bit version for flat memory model
			      C ; R. Detmer   last revised 8/2000
			      C .NOLIST     ; turn off listing
			      C .LIST        ; begin listing
			      C 

 00000000			.DATA
 00000000 00000053		array		DWORD	83,-21,33,10,90,2
	   FFFFFFEB
	   00000021
	   0000000A
	   0000005A
	   00000002
 00000018  00000006 [		newarray	DWORD	6 DUP (?)
	    00000000
	   ]
 00000030  0000000B [		outstring	BYTE	11 DUP (?)
	    00
	   ]
 0000003B  0D 0A 00					BYTE	0dh,0ah,0

 00000000			.CODE
 00000000			_main:
 00000000  BB 00000005					mov		ebx, 5
 00000005  53						push	ebx
 00000006  BB 00000000					mov		ebx, 0
 0000000B  53						push	ebx
 0000000C  8D 1D 00000000 R				lea		ebx, array
 00000012  53						push	ebx
 00000013  E8 0000003C					call	sort
 00000018  83 C4 0C					add		esp, 12
 0000001B  B9 00000000					mov		ecx, 0				; length of array
 00000020  83 F9 06		print:		cmp		ecx, 6
 00000023  73 28					jae		done
 00000025  8B C1					mov		eax,ecx
 00000027  C1 E0 02					shl		eax,2
							dtoa	outstring, [ebx+eax]
							output	outstring
 0000004A  41						inc		ecx
 0000004B  EB D3					jmp		print
 0000004D			done:		invoke	ExitProcess, 0

 00000054			sort		PROC
 00000054  55						push	ebp
 00000055  8B EC					mov		ebp, esp
 00000057  50						push	eax
 00000058  53						push	ebx
 00000059  51						push	ecx
 0000005A  52						push	edx
 0000005B  9C						pushfd

 0000005C  8B 45 0C					mov		eax, [ebp+12]
 0000005F  8B 5D 10					mov		ebx, [ebp+16]
 00000062  3B C3					cmp		eax, ebx
 00000064  73 35					jae		endsort

 00000066  FF 75 10					push	[ebp+16]			
 00000069  FF 75 0C					push	[ebp+12]
 0000006C  FF 75 08					push	[ebp+8]
 0000006F  E8 0000002E					call	partition
 00000074  83 C4 0C					add		esp, 12
							
 00000077  8B D8					mov		ebx, eax
 00000079  4B						dec		ebx
 0000007A  53						push	ebx
 0000007B  FF 75 0C					push	[ebp+12]
 0000007E  FF 75 08					push	[ebp+8]
 00000081  E8 FFFFFFCE					call	sort
 00000086  83 C4 0C					add		esp, 12

 00000089  8B D8					mov		ebx, eax
 0000008B  43						inc		ebx
 0000008C  FF 75 10					push	[ebp+16]
 0000008F  53						push	ebx
 00000090  FF 75 08					push	[ebp+8]
 00000093  E8 FFFFFFBC					call	sort
 00000098  83 C4 0C					add		esp, 12
 0000009B			endsort:
 0000009B  9D						popfd
 0000009C  5A						pop		edx
 0000009D  59						pop		ecx
 0000009E  5B						pop		ebx
 0000009F  58						pop		eax
 000000A0  5D						pop		ebp
 000000A1  C3						ret
 000000A2			sort		ENDP
							

 000000A2			partition	PROC
 000000A2  55						push	ebp
 000000A3  8B EC					mov		ebp, esp
 000000A5  53						push	ebx
 000000A6  51						push	ecx
 000000A7  52						push	edx
 000000A8  56						push	esi
 000000A9  57						push	edi
 000000AA  9C						pushfd

 000000AB  8B 4D 0C					mov		ecx, [ebp+12]
 000000AE  8B 55 10					mov		edx, [ebp+16]
 000000B1  3B CA		mainwhile:	cmp		ecx, edx
 000000B3  73 56					jae		endmainwhile

 000000B5  8B 45 08		while1:		mov		eax, [ebp+8]
 000000B8  8B D9					mov		ebx, ecx
 000000BA  C1 E3 02					shl		ebx, 2
 000000BD  8B 34 03					mov		esi, [eax+ebx]
 000000C0  8B 5D 0C					mov		ebx, [ebp+12]
 000000C3  C1 E3 02					shl		ebx, 2
 000000C6  3B 34 03					cmp		esi, [eax+ebx]
 000000C9  7F 03					jg		nextwhile
 000000CB  41						inc		ecx
 000000CC  EB E7					jmp		while1
 000000CE			nextwhile:
 000000CE  8B 45 08		while2: 	mov		eax, [ebp+8]
 000000D1  8B DA					mov		ebx, edx
 000000D3  C1 E3 02					shl		ebx, 2
 000000D6  8B 34 03					mov		esi, [eax+ebx]
 000000D9  8B 5D 0C					mov		ebx, [ebp+12]
 000000DC  C1 E3 02					shl		ebx, 2
 000000DF  3B 34 03					cmp		esi, [eax+ebx]
 000000E2  7E 03					jle		endwhile2
 000000E4  4A						dec		edx
 000000E5  EB E7					jmp		while2
 000000E7			endwhile2:
 000000E7  3B CA					cmp		ecx, edx
 000000E9  7D 1E					jge		whileloop
 000000EB  8B 45 08					mov		eax, [ebp+8]
 000000EE  8B D9					mov		ebx, ecx
 000000F0  C1 E3 02					shl		ebx, 2
 000000F3  8B 34 03					mov		esi, [eax+ebx]
 000000F6  8B DA					mov		ebx, edx
 000000F8  C1 E3 02					shl		ebx, 2
 000000FB  8B 3C 03					mov		edi, [eax+ebx]
 000000FE  89 34 03					mov		DWORD PTR [eax+ebx], esi
 00000101  8B D9					mov		ebx, ecx
 00000103  C1 E3 02					shl		ebx, 2
 00000106  89 3C 03					mov		DWORD PTR [eax+ebx], edi
 00000109			whileloop:
 00000109  EB A6					jmp		mainwhile
 0000010B			endmainwhile:
 0000010B  8B 45 08					mov		eax, [ebp+8]
 0000010E  8B 5D 0C					mov		ebx, [ebp+12]
 00000111  C1 E3 02					shl		ebx, 2
 00000114  8B 34 03					mov		esi, [eax+ebx]
 00000117  8B DA					mov		ebx, edx
 00000119  C1 E3 02					shl		ebx, 2
 0000011C  8B 3C 03					mov		edi, [eax+ebx]
 0000011F  89 34 03					mov		DWORD PTR [eax+ebx], esi
 00000122  8B 5D 0C					mov		ebx, [ebp+12]
 00000125  C1 E3 02					shl		ebx, 2
 00000128  89 3C 03					mov		DWORD PTR [eax+ebx], edi
 0000012B  8B C2					mov		eax, edx
 0000012D  9D						popfd
 0000012E  5F						pop		edi
 0000012F  5E						pop		esi
 00000130  5A						pop		edx
 00000131  59						pop		ecx
 00000132  5B						pop		ebx
 00000133  5D						pop		ebp
 00000134  C3						ret
 00000135			partition	ENDP

				public	_main
				END
Microsoft (R) Macro Assembler Version 11.00.50727.1	    01/13/14 23:06:23
quicksort.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atoi . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
itoa . . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00002710 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000003E DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000135 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
partition  . . . . . . . . . . .	P Near	 000000A2 _TEXT	Length= 00000093 Public
  mainwhile  . . . . . . . . . .	L Near	 000000B1 _TEXT	
  while1 . . . . . . . . . . . .	L Near	 000000B5 _TEXT	
  nextwhile  . . . . . . . . . .	L Near	 000000CE _TEXT	
  while2 . . . . . . . . . . . .	L Near	 000000CE _TEXT	
  endwhile2  . . . . . . . . . .	L Near	 000000E7 _TEXT	
  whileloop  . . . . . . . . . .	L Near	 00000109 _TEXT	
  endmainwhile . . . . . . . . .	L Near	 0000010B _TEXT	
sort . . . . . . . . . . . . . .	P Near	 00000054 _TEXT	Length= 0000004E Public
  endsort  . . . . . . . . . . .	L Near	 0000009B _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_main  . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public
array  . . . . . . . . . . . . .	DWord	 00000000 _DATA	
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atoiproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
done . . . . . . . . . . . . . .	L Near	 0000004D _TEXT	
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
inproc . . . . . . . . . . . . .	L Near	 00000000 FLAT	External
itoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
newarray . . . . . . . . . . . .	DWord	 00000018 _DATA	
outproc  . . . . . . . . . . . .	L Near	 00000000 FLAT	External
outstring  . . . . . . . . . . .	Byte	 00000030 _DATA	
print  . . . . . . . . . . . . .	L Near	 00000020 _TEXT	

	   0 Warnings
	   0 Errors
